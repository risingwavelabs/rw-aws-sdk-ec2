// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_xml::decode::XmlDecodeError> {
    crate::ec2_query_errors::parse_error_metadata(response_body)
}

// needed apis 
pub(crate) mod shape_create_vpc_endpoint;
pub(crate) mod shape_delete_vpc_endpoints;
pub(crate) mod shape_describe_vpc_endpoints;
pub(crate) mod shape_describe_vpc_endpoint_services;
pub(crate) mod shape_describe_subnets;

// // needed by above
pub(crate) mod shape_subnet_list;
pub(crate) mod shape_service_detail_set;
pub(crate) mod shape_value_string_list;
pub(crate) mod shape_vpc_endpoint;
pub(crate) mod shape_create_vpc_endpoint_input;
pub(crate) mod shape_last_error;
pub(crate) mod shape_tag_list;
pub(crate) mod shape_dns_entry_set;
pub(crate) mod shape_unsuccessful_item_set;
pub(crate) mod shape_delete_vpc_endpoints_input;
pub(crate) mod shape_describe_subnets_input;
pub(crate) mod shape_describe_vpc_endpoint_services_input;
pub(crate) mod shape_describe_vpc_endpoints_input;
pub(crate) mod shape_vpc_endpoint_set;
pub(crate) mod shape_subnet;
pub(crate) mod shape_service_detail;
pub(crate) mod shape_dns_options;
pub(crate) mod shape_group_identifier_set;
pub(crate) mod shape_dns_options_specification;
pub(crate) mod shape_tag_specification;
pub(crate) mod shape_subnet_configuration;
pub(crate) mod shape_tag;
pub(crate) mod shape_dns_entry;
pub(crate) mod shape_unsuccessful_item;
pub(crate) mod shape_filter;
pub(crate) mod shape_security_group_identifier;
pub(crate) mod shape_unsuccessful_item_error;
pub(crate) mod shape_subnet_ipv6_cidr_block_association_set;
pub(crate) mod shape_private_dns_name_options_on_launch;
pub(crate) mod shape_service_type_detail_set;
pub(crate) mod shape_private_dns_details_set;
pub(crate) mod shape_supported_ip_address_types;
pub(crate) mod shape_subnet_ipv6_cidr_block_association;
pub(crate) mod shape_service_type_detail;
pub(crate) mod shape_private_dns_details;
pub(crate) mod shape_subnet_cidr_block_state;